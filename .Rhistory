# Create a vector containing the required packages. Check if installed and if not, install.
packages <- c("readxl", "dplyr", "pROC","writexl")
installed <- packages %in% rownames(installed.packages())
if (any(!installed)) {
install.packages(packages[!installed])
} else {
message("Packages are already installed")
}
# Set working directory to local environment (adjust as needed)
setwd("~/Maastricht University/Biomedical Sciences/BMS year 3/BBS3006 - Thesis & Internship/Butterfly")
# Load required R packages
source("AreaAnalysis_Functions.R")      # Loads custom analysis functions
library(readxl)                         # For reading Excel files (.xlsx)
library(dplyr)                          # For data manipulation (e.g., filtering, mutating)
library(pROC)                           # For ROC curve analysis
library(writexl)                        # For writing Excel files (.xlsx)
# Load Excel spreadsheet with patient metadata and breath VOC intensities
# and turn into dataframe
rawdata <- read_excel("Breath_Rawdata.xlsx")
# Clean column names to lowercase and simplify.
names(rawdata) <- tolower(gsub("[^[:alnum:]_]", "_", names(rawdata)))
# Recode Tumor Classification → Binary (Benign = 0, Malignant = 1).
rawdata$tumor_bin <- ifelse(tolower(rawdata$tumor_classification) == "malignant", 1,
ifelse(tolower(rawdata$tumor_classification) == "benign", 0, NA))
# Recode Fasting → Binary (Ja/Yes = 1, Nee/No = 0)
rawdata$fasting_bin <- ifelse(tolower(rawdata$fasting) %in% c("ja", "yes"), 1,
ifelse(tolower(rawdata$fasting) %in% c("nee", "no"), 0, NA))
# Insert sex_bin after sex
rawdata$sex_bin <- ifelse(tolower(rawdata$sex) == "m", 1,
ifelse(tolower(rawdata$sex) == "v", 2, NA))
# Recode BMI to ordinal categories:
#   1 = normal weight (0–24.9)
#   2 = overweight (25–29.9)
#   3 = obese (30+)
bmi_bin <- which(names(rawdata) == "bmi")  # Find index of "bmi" column
rawdata$bmi_bin <- cut(
rawdata$bmi,
breaks = c(0, 24.9, 29.9, Inf),
labels = 1:3,
right = TRUE,
include.lowest = TRUE
) # Factor column `bmi_bin` with levels 1–3
# Recode Age to ordinal bins by decade (starting from <30)
#   1 = 0–29, 2 = 30–39, ..., 8 = 90+
age_bin <- which(names(rawdata) == "age")  # Find index of "age" column
rawdata$age_bin <- cut(
rawdata$age,
breaks = c(0, 29, 39, 49, 59, 69, 79, 89, Inf),
labels = 1:8,
right = TRUE,
include.lowest = TRUE
) # Factor column `age_bin` with levels 1–8 (age groups by decade)
# Recode Smoking history to ordinal categories:
#   1 = non-smoker, 2 = ex-smoker, 3 = current smoker
smoke_bin <- which(names(rawdata) == "smoking_history")
rawdata$smoke_bin <- ifelse(
tolower(rawdata$smoking_history) == "non", 1,
ifelse(tolower(rawdata$smoking_history) == "ex", 2,
ifelse(tolower(rawdata$smoking_history) == "current", 3, NA))
) # Numeric column `smoke_bin` with levels 1–3
# Save cleaned version
write_xlsx(rawdata, "Breath_Metadata.xlsx")
# This function performs ROC analysis for each area (VOC compound) across
# multiple diagnostic classes. It reads the metadata which includes the
# classification labels & potential confounding factors, and generates ROC curves
# for each marker against each class using a one-vs-rest approach.
# For each class-marker combination, it calculates performance metrics including AUC,
# sensitivity, specificity, and Youden Index. The resulting performance metrics are
# saved for further filtering and selection of top markers.
ROCClassAnalysis("Breath_Metadata.xlsx", "Breath_RCA.xlsx")
# Filter the results based on Youden Index > 0.3 and Specificity >= 0.65
# This selects markers with moderate discriminatory power and acceptable specificity
filtered <- results[results$Youden_Index > 0.3 & results$Specificity >= 0.65, ]
# This function performs ROC analysis for each area (VOC compound) across
# multiple diagnostic classes. It reads the metadata which includes the
# classification labels & potential confounding factors, and generates ROC curves
# for each marker against each class using a one-vs-rest approach.
# For each class-marker combination, it calculates performance metrics including AUC,
# sensitivity, specificity, and Youden Index. The resulting performance metrics are
# saved for further filtering and selection of top markers.
ROCClassAnalysis("Breath_Metadata.xlsx", "Breath_RCA.xlsx")
# Load ROC results from Excel file into a data frame called 'results'
results <- read_excel("Breath_RCA.xlsx")
# Filter the results based on Youden Index > 0.3 and Specificity >= 0.65
# This selects markers with moderate discriminatory power and acceptable specificity
filtered <- results[results$Youden_Index > 0.3 & results$Specificity >= 0.65, ]
# Remove any rows where the 'Class' column contains NA values
# Ensures only valid class labels are included for downstream analysis
filtered <- filtered[!is.na(filtered$Class), ]
# Sort the filtered results by Youden Index in descending order
filtered <- filtered[order(-filtered$Youden_Index), ]
# Print the sorted filtered results to the console
print(filtered)
# Save the sorted filtered results to an Excel file
write_xlsx(filtered, "Final Areas.xlsx")
# Load ROC results from Excel file into a data frame called 'results'
results <- read_excel("Breath_RCA.xlsx")
# Filter the results based on Youden Index > 0.3 and Specificity >= 0.65
# This selects markers with moderate discriminatory power and acceptable specificity
filtered <- results[results$Youden_Index > 0.3 & results$Specificity >= 0.65, ]
# Remove any rows where the 'Class' column contains NA values
# Ensures only valid class labels are included for downstream analysis
filtered <- filtered[!is.na(filtered$Class), ]
# Sort the filtered results by Youden Index in descending order
filtered <- filtered[order(-filtered$Youden_Index), ]
# Print the sorted filtered results to the console
print(filtered)
# Save the sorted filtered results to an Excel file
write_xlsx(filtered, "Final Areas.xlsx")
# This helps identify markers potentially influenced by confounders, guiding further interpretation.
ConfounderEffectAnalysis(
full_data_path = "Breath_Metadata.xlsx",
top_areas_path = "Final Areas.xlsx",
output_file = "Breath_CEA.xlsx"
)
# ==============================================================================
# End of script
print("All analyses completed successfully.")
print("Results have been saved to the specified output files.")
print("Thank you for using this analysis pipeline.")
# Create a vector containing the required packages. Check if installed and if not, install.
packages <- c("ggplot2", "readxl", "lubridate")
# Check if required packages are installed, install if missing
installed <- packages %in% rownames(installed.packages())
if (any(!installed)) {
install.packages(packages[!installed])
} else {
message("Packages are already installed")
}
# Check if required packages are installed, install if missing
installed <- packages %in% rownames(installed.packages())
if (any(!installed)) {
install.packages(packages[!installed])
} else {
message("Packages are already installed")
}
# Set working directory to local environment (adjust as needed)
setwd("~/Maastricht University/Biomedical Sciences/BMS year 3/BBS3006 - Thesis & Internship/Butterfly")
# Source custom functions (e.g., plot_range, save.pdf, plot_range2)
source("HumTemp_Functions.R")
# Load required libraries
library(readxl)     # For reading Excel files
library(lubridate)  # For time parsing and manipulation
library(ggplot2)    # For data visualization
# Create an output directory if it doesn't already exist
if (!dir.exists("Output")) {
dir.create("Output")
}
# Load data from Excel file and convert to data frame
weekdays <- read_excel("LAB.xlsx")
weekdays <- as.data.frame(weekdays)
# Convert 'Day' column to a factor (categorical)
weekdays$Day <- as.factor(weekdays$Day)
# Convert selected columns (which contain numbers as text) to numeric values
# Replace comma with dot for decimal, and remove spaces
titles <- c("RH Max (%)", "Temp Max (°C)", "RH Min (%)", "Temp Min (°C)")
weekdays[titles] <- lapply(weekdays[titles],
function(x) as.numeric(gsub(",", ".", gsub(" ", "", x))))
# Compute relative humidity mean and range for each observation
weekdays$RH_Mean <- (weekdays$`RH Max (%)` + weekdays$`RH Min (%)`) / 2
weekdays$RH_Range <- weekdays$`RH Max (%)` - weekdays$`RH Min (%)`
# Compute temperature mean and range
weekdays$Temp_Mean <- (weekdays$`Temp Max (°C)` + weekdays$`Temp Min (°C)`) / 2
weekdays$Temp_Range <- weekdays$`Temp Max (°C)` - weekdays$`Temp Min (°C)`
# Extract RH and temperature columns for summary statistics
RH_Temp <- weekdays[3:10]
# Display summary statistics
summary(RH_Temp)
# Clean and standardize column name: rename "Time of day" to "Time.of.Day"
names(weekdays)[names(weekdays) == "Time of day"] <- "Time.of.Day"
# Convert 'Time.of.Day' column to HMS (hour-minute-second) time format
weekdays$Time.of.Day <- hms::as_hms(weekdays$Time.of.Day)
# Categorize time of day into three time bins: 08, 12, 16
weekdays$Time.Category <- cut(
as.numeric(hms::as_hms(weekdays$Time.of.Day)),  # Convert to numeric seconds
breaks = c(0, 10*3600, 14*3600, 24*3600),        # Define 3 intervals: 0–10h, 10–14h, 14–24h
labels = c("08", "12", "16"),                   # Label bins for grouping
include.lowest = TRUE, right = FALSE
)
# Plot relative humidity using boxplot across time categories
save.pdf(function(){
plot_range(weekdays, "RH_Mean", "Mean Relative Humidity (%)",
"Relative Humidity Range per Measurement")
}, "RH Range")
# Plot temperature using boxplot across time categories
save.pdf(function(){
plot_range(weekdays, "Temp_Mean", "Mean Temperature (°C)",
"Temperature Range per Measurement")
}, "Temperature Range")
# Line plot for RH max/min per day and time
plot_range2(weekdays, "RH Max (%)", "RH Min (%)", "Relative Humidity (%)",
"Relative Humidity Range per Measurement (%)")
# Line plot for Temp max/min per day and time
plot_range2(weekdays, "Temp Max (°C)", "Temp Min (°C)", "Temperature (°C)",
"Temperature Range per Measurement (°C)")
# ANOVA for RH Max
aov_max <- aov(`RH Max (%)` ~ Time.of.Day + Error(Day/Time.of.Day), data = weekdays)
summary(aov_max)
# ANOVA for RH Min
aov_min <- aov(`RH Min (%)` ~ Time.of.Day + Error(Day/Time.of.Day), data = weekdays)
summary(aov_min)
# ANOVA for RH Mean
aov_mean <- aov(RH_Mean ~ Time.of.Day + Error(Day/Time.of.Day), data = weekdays)
summary(aov_mean)
# ANOVA for RH Range
aov_range <- aov(RH_Range ~ Time.of.Day + Error(Day/Time.of.Day), data = weekdays)
summary(aov_range)
# ANOVA for Temp Max
aov_temp_max <- aov(`Temp Max (°C)` ~ Time.of.Day + Error(Day/Time.of.Day), data = weekdays)
summary(aov_temp_max)
# ANOVA for Temp Min
aov_temp_min <- aov(`Temp Min (°C)` ~ Time.of.Day + Error(Day/Time.of.Day), data = weekdays)
summary(aov_temp_min)
# ANOVA for Temp Mean
aov_temp_mean <- aov(Temp_Mean ~ Time.of.Day + Error(Day/Time.of.Day), data = weekdays)
summary(aov_temp_mean)
# ANOVA for Temp Range
aov_temp_range <- aov(Temp_Range ~ Time.of.Day + Error(Day/Time.of.Day), data = weekdays)
summary(aov_temp_range)
# Pearson correlation between mean temperature and mean relative humidity
cor(weekdays$Temp_Mean, weekdays$RH_Mean, method = "pearson")
# ==============================================================================
# End of script
#
# If you wish you can repeat the script and subsequent steps with other
# humidity and temperature data.
print("All steps completed successfully. Check output directory for visualizations and results.")
